AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Bedrock-powered chatbot interface'

Parameters:
  DynamoDBTableName:
    Type: String
    Description: Name of the DynamoDB table to store results
    Default: chatbot-history

  BedrockModelId:
    Type: String
    Description: ID of the Bedrock model to use
    Default: anthropic.claude-v2

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  ChatbotLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt ChatbotLambdaRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import os

          region = os.environ['AWS_REGION']
          bedrock = boto3.client('bedrock-runtime', region_name=region)
          dynamodb = boto3.resource('dynamodb', region_name=region)
          table_name = os.environ['DYNAMODB_TABLE_NAME']
          model_id = os.environ['BEDROCK_MODEL_ID']

          def handler(event, context):
              # Extract input from API Gateway event
              try:
                  body = json.loads(event['body'])
                  input_text = body.get('input', '')
              except:
                  input_text = "Hello"
              
              # Call Bedrock model
              response = bedrock.invoke_model(
                  modelId=model_id,
                  contentType='application/json',
                  accept='application/json',
                  body=json.dumps({
                      "prompt": input_text,
                      "max_tokens_to_sample": 300,
                      "temperature": 0.7,
                      "top_p": 0.9,
                  })
              )
              
              model_response = json.loads(response['body'].read())['completion']
              
              # Store interaction in DynamoDB
              table = dynamodb.Table(table_name)
              table.put_item(
                  Item={
                      'id': context.aws_request_id,
                      'input': input_text,
                      'response': model_response
                  }
              )
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*'
                  },
                  'body': json.dumps({
                      'response': model_response
                  })
              }
      Runtime: python3.8
      Timeout: 30
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref DynamoDBTableName
          BEDROCK_MODEL_ID: !Ref BedrockModelId
          AWS_REGION: !Ref AWS::Region

  ChatbotLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt DynamoDBTable.Arn

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: ChatbotAPI
      Description: API for chatbot interface

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: chat

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt ChatbotLambda.Arn

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: prod

  LambdaApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ChatbotLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/chat

Outputs:
  ChatbotApiUrl:
    Description: URL of the chatbot API
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/chat